/*
 * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
/dts-v1/;

#include "am33xx.dtsi"
#include <dt-bindings/interrupt-controller/irq.h>

/ {
	model = "MYIR AM335x MYC";
	compatible = "myc_c335x", "ti,am33xx";

	cpus {
		cpu@0 {
			cpu0-supply = <&vdd_core>;
		};
	};

	memory {
		device_type = "memory";
		reg = <0x80000000 0x20000000>; /* 512 MB */
	};

	vbat: fixedregulator@0 {
		compatible = "regulator-fixed";
		regulator-name = "vbat";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		regulator-boot-on;
		regulator-always-on;
	};
	
	vdd_3v3: fixedregulator@1{
		compatible = "regulator-fixed";
		regulator-name = "vdd_3v3";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		vin-supply = <&vbat>;
		regulator-boot-on;
		regulator-always-on;
		};
	
	vdd_1v8: fixedregulator@2{
		compatible = "regulator-fixed";
		regulator-name = "vdd_1v8";
		regulator-min-microvolt = <1800000>;
		regulator-max-microvolt = <1800000>;
		vin-supply = <&vdd_3v3>;
		regulator-boot-on;
		regulator-always-on;
		};
	
	vdd_core: fixedregulator@3{
		compatible = "regulator-fixed";
		regulator-name = "vdd_core";
		regulator-min-microvolt = <912500>;
                regulator-max-microvolt = <1378000>;
		vin-supply = <&vdd_3v3>;
		regulator-boot-on;
		regulator-always-on;
		};
	
	vdd_mpu: fixedregulator@4{
		compatible = "regulator-fixed";
		regulator-name = "vdd_mpu";
		regulator-min-microvolt = <1000000>;
		regulator-max-microvolt = <1500000>;
		vin-supply = <&vdd_3v3>;
		regulator-boot-on;
		regulator-always-on;
		};
	
	vdd_adc: fixedregulator@5{
		compatible = "regulator-fixed";
		regulator-name = "vdd_adc";
		regulator-min-microvolt = <1800000>;
		regulator-max-microvolt = <1800000>;
		vin-supply = <&vdd_1v8>;
		regulator-boot-on;
		regulator-always-on;
		};
	
	vdd_rtc: fixedregulator@6{
		compatible = "regulator-fixed";
		regulator-name = "vdd_rtc";
		regulator-min-microvolt = <1800000>;
		regulator-max-microvolt = <1800000>;
		vin-supply = <&vdd_1v8>;
		regulator-boot-on;
		regulator-always-on;
		};

	gpio_keys: volume_keys@0 {
		compatible = "gpio-keys";
		#address-cells = <1>;
		#size-cells = <0>;
		autorepeat;

		switch@9 {
			label = "volume-up";
			linux,code = <115>;
			gpios = <&gpio3 0 GPIO_ACTIVE_LOW>;
			gpio-key,wakeup;
		};

		switch@10 {
			label = "volume-down";
			linux,code = <114>;
			gpios = <&gpio0 29 GPIO_ACTIVE_LOW>;
			gpio-key,wakeup;
		};
	};

	gpio-leds {
		compatible = "gpio-leds";
		pinctrl-names = "default";
		pinctrl-0 = <&leds_pins>;

		D3 {
			label = "myc:green:user1";
			gpios = <&gpio3 18 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "cpu0";
			default-state = "off";
		};

		LED1 {
			label = "myd:LED1";
			gpios = <&gpio0 9 GPIO_ACTIVE_HIGH>;
			default-state = "off";
		};
		
		LED2 {
			label = "myd:LED2";
			gpios = <&gpio2 16 GPIO_ACTIVE_HIGH>;
			default-state = "off";
		};

		LED3 {
			label = "myd:LED3";
			gpios = <&gpio0 8 GPIO_ACTIVE_HIGH>;
			default-state = "off";
		};
		
		LED4 {
			label = "myd:LED4";
			gpios = <&gpio2 17 GPIO_ACTIVE_HIGH>;
			default-state = "off";
		};

		LED5 {
			label = "myd:LED5";
			gpios = <&gpio0 11 GPIO_ACTIVE_HIGH>;
			default-state = "off";
		};
		
		};
	
	wifi: rfkill@0 {
		compatible = "rfkill-gpio";
		pinctrl-names = "default";
		pinctrl-0 = <&wlan_pins>;
		rfkill-name = "wifi";
		rfkill-type = <1>;
		reset-gpios = <&gpio0 23 GPIO_ACTIVE_HIGH>;
		shutdown-gpios = <&gpio3 1 GPIO_ACTIVE_LOW>;
		reset-delay-us = <300000>;
	};	
/*		
	lora: rfkill@1 {
		compatible = "rfkill-gpio";
		pinctrl-names = "default";
		pinctrl-0 = <&lora_pins>;
		rfkill-name = "lora";
		rfkill-type = <8>;
		reset-gpios = <&gpio3 14 GPIO_ACTIVE_HIGH>;
		shutdown-gpios = <&gpio3 15 GPIO_ACTIVE_HIGH>;
		reset-delay-us = <300000>;
	};
*/
	gps: rfkill@2 {
		compatible = "rfkill-gpio";
		pinctrl-names = "default";
		pinctrl-0 = <&gps_pins>;
		rfkill-name = "gps";
		rfkill-type = <6>;
 		reset-gpios = <&gpio1 8 GPIO_ACTIVE_HIGH>;
		shutdown-gpios = <&gpio1 9 GPIO_ACTIVE_LOW>;
		reset-delay-us = <300000>;
	};

	u8300c: rfkill@3 {
		compatible = "rfkill-gpio";
		pinctrl-names = "default";
		pinctrl-0 = <&u8300c_pins>;
		rfkill-name = "uwb";
		rfkill-type = <3>;
		reset-gpios = <&gpio3 17 GPIO_ACTIVE_LOW>;
		shutdown-gpios = <&gpio0 18 GPIO_ACTIVE_HIGH>;
		reset-delay-us = <300000>;
	};

	battery: gw5000-battery {
		compatible = "gw5000-battery";
		pinctrl-names = "default";
		pinctrl-0 = <&battery_pins>;		
		io-channels = <&am335x_adc 0>,<&am335x_adc 1>;
		io-channel-names="vbat", "test";
		detect-gpios = <&gpio2 23 GPIO_ACTIVE_LOW>;
		sysoff-gpios = <&gpio2 22 GPIO_ACTIVE_HIGH>;
		low-battery-poweroff = <1>;
		interrupt-parent = <&gpio2>;
		interrupts = <23 IRQ_TYPE_EDGE_BOTH>;
		vref = <1720>;
		minVolt = <6400>;
		maxVolt = <8400>;
		};
		
	watchdog: watchdog {
		/* CAT823T */
		compatible = "linux,wdt-gpio";
		pinctrl-names = "default";
		pinctrl-0 = <&watchdog_pins>;
		gpios = <&gpio2 24 GPIO_ACTIVE_LOW>;
		hw_algo = "toggle";
		always-running;
		hw_margin_ms = <1000>;
	};
		
};


&am33xx_pinmux {
	pinctrl-names = "default";
	pinctrl-0 = <&volume_keys_s0>;

	volume_keys_s0: volume_keys_s0 {
		pinctrl-single,pins = <
			0x108 (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* (H16) gmii1_col.gpio3[0] */
			0x144 (PIN_INPUT | MUX_MODE7 ) /* (H18) rmii1_refclk.gpio0[29] */
		>;
	};

	wlan_pins: pinmux_wlan_pins {
		pinctrl-single,pins = <
			0x10c (PIN_OUTPUT_PULLDOWN  | MUX_MODE7)	/* WLAN_PWR  .gpio3_1 */
			0x24 (PIN_OUTPUT | MUX_MODE7)	/* WLAN_RESET gpmc_ad9.gpio0_23 */
		>;
	};

	lora_pins: pinmux_lora_pins {
		pinctrl-single,pins = <
			0x190 (PIN_OUTPUT_PULLUP | MUX_MODE7)	/* LORA_RESET  gpio3_14 */
			0x194 (PIN_OUTPUT  | MUX_MODE7)		/* LORA_PWR  gpio3_15 */
		>;	
		};

	gps_pins: pinmux_gps_pins {
		pinctrl-single,pins = <
			0x168 (PIN_OUTPUT | MUX_MODE7)	/*  */
			0x16c (PIN_OUTPUT | MUX_MODE7)		/*  */
		>;	
		};	

	u8300c_pins: pinmux_u8300c_pins {
		pinctrl-single,pins = <
			0x21c (PIN_OUTPUT_PULLUP  | MUX_MODE7)	/*  */
			0x19c (PIN_OUTPUT_PULLUP  | MUX_MODE7)		/*  */
		>;	
		};	

	usbhub_pins: pinmux_usbhub_pins {
		pinctrl-single,pins = <
			0x234 (PIN_OUTPUT | MUX_MODE7)
		>;
	};

	battery_pins: pinmux_battery_pins{
		pinctrl-single,pins = <
			0xE0 (PIN_OUTPUT | MUX_MODE7)
			0xE4 (PIN_INPUT_PULLUP | MUX_MODE7)
		>;
		};

	watchdog_pins: pinmux_watchdog_pins{
		pinctrl-single,pins = <0xE8 (PIN_OUTPUT_PULLDOWN | MUX_MODE7)>;
	};

	leds_pins: pinmux_leds_pins {
		pinctrl-single,pins = <
			0x1A0 (PIN_OUTPUT_PULLDOWN | MUX_MODE7)
			0xDC (PIN_OUTPUT_PULLDOWN | MUX_MODE7)
			0xD4 (PIN_OUTPUT_PULLDOWN | MUX_MODE7)
			0xD0 (PIN_OUTPUT_PULLDOWN | MUX_MODE7)
			0xCC (PIN_OUTPUT_PULLDOWN | MUX_MODE7)
			0xC8 (PIN_OUTPUT_PULLDOWN | MUX_MODE7)
		>;
	};
	
	i2c0_pins: pinmux_i2c0_pins {
		pinctrl-single,pins = <
			0x188 (PIN_INPUT_PULLUP | MUX_MODE0)	/* i2c0_sda.i2c0_sda */
			0x18c (PIN_INPUT_PULLUP | MUX_MODE0)	/* i2c0_scl.i2c0_scl */
		>;
	};
	
	spi0_pins_default: spi0_pins_default {
		pinctrl-single,pins = <
			0x150 (PIN_INPUT_PULLUP  | MUX_MODE0) /* (A17) spi0_sclk.spi0_sclk */
			0x154  (PIN_INPUT_PULLUP  | MUX_MODE0) /* (B17) spi0_d0.spi0_d0 */
			0x158 (PIN_INPUT_PULLUP  | MUX_MODE0) /* (B16) spi0_d1.spi0_d1 */
			0x15c  (PIN_INPUT_PULLUP  | MUX_MODE0) /* (A16) spi0_cs0.spi0_cs0 */
		>;
	};
	
	spi0_pins_sleep: spi0_pins_sleep {
		pinctrl-single,pins = <
			0x150 (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* spi0_sclk.spi0_sclk */
			0x154 (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* spi0_d0.spi0_d0 */
			0x158 (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* spi0_d1.spi0_d1 */
			0x15c (PIN_INPUT_PULLDOWN | MUX_MODE7)	/* spi0_cs0.spi0_cs0 */
		>;
	};

	uart0_pins: pinmux_uart0_pins {
		pinctrl-single,pins = <
			0x170 (PIN_INPUT_PULLUP | MUX_MODE0)	/* uart0_rxd.uart0_rxd */
			0x174 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* uart0_txd.uart0_txd */
		>;
	};

    uart1_pins_default: pinmux_uart1_pins_default {
          pinctrl-single,pins = <
                0x180 (PIN_INPUT_PULLUP | MUX_MODE0)    /* uart1_rxd.uart1_rxd */
                0x184 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)         /* uart1_txd.uart1_txd */
                >;
        };

    uart1_pins_sleep: pinmux_uart1_pins_sleep {
          pinctrl-single,pins = <
                0x180 (PIN_INPUT_PULLDOWN | MUX_MODE7)
                0x184 (PIN_INPUT_PULLDOWN | MUX_MODE7)
                >;
        };
        
	uart3_pins: pinmux_uart3_pins {
		pinctrl-single,pins = <
			0x160 (PIN_INPUT_PULLUP | MUX_MODE1)	/* uart3_rxd.uart03_rxd */
			0x164 (PIN_OUTPUT_PULLDOWN | MUX_MODE1)	/* uart03_txd.uart3_txd */
		>;
	};


	nandflash_pins_default: nandflash_pins_default {
		pinctrl-single,pins = <
			0x0 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad0.gpmc_ad0 */
			0x4 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad1.gpmc_ad1 */
			0x8 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad2.gpmc_ad2 */
			0xc (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad3.gpmc_ad3 */
			0x10 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad4.gpmc_ad4 */
			0x14 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad5.gpmc_ad5 */
			0x18 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad6.gpmc_ad6 */
			0x1c (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad7.gpmc_ad7 */
			0x70 (PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_wait0.gpmc_wait0 */
			0x74 (PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_wpn.gpio0_30 */
			0x7c (PIN_OUTPUT | MUX_MODE0)		/* gpmc_csn0.gpmc_csn0  */
			0x90 (PIN_OUTPUT | MUX_MODE0)		/* gpmc_advn_ale.gpmc_advn_ale */
			0x94 (PIN_OUTPUT | MUX_MODE0)		/* gpmc_oen_ren.gpmc_oen_ren */
			0x98 (PIN_OUTPUT | MUX_MODE0)		/* gpmc_wen.gpmc_wen */
			0x9c (PIN_OUTPUT | MUX_MODE0)		/* gpmc_be0n_cle.gpmc_be0n_cle */
		>;
	};

	nandflash_pins_sleep: nandflash_pins_sleep {
		pinctrl-single,pins = <
			0x0 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x4 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x8 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0xc (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x10 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x14 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x18 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x1c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x70 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x74 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x7c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x90 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x94 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x98 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x9c (PIN_INPUT_PULLDOWN | MUX_MODE7)
		>;
	};


	cpsw_default: cpsw_default {
		pinctrl-single,pins = <
			/* Slave 1 */
			0x114 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txen.rgmii1_tctl */
			0x118 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxdv.rgmii1_rctl */
			0x11c (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txd3.rgmii1_td3 */
			0x120 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txd2.rgmii1_td2 */
			0x124 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txd1.rgmii1_td1 */
			0x128 (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txd0.rgmii1_td0 */
			0x12c (PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* mii1_txclk.rgmii1_tclk */
			0x130 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxclk.rgmii1_rclk */
			0x134 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxd3.rgmii1_rd3 */
			0x138 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxd2.rgmii1_rd2 */
			0x13c (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxd1.rgmii1_rd1 */
			0x140 (PIN_INPUT_PULLDOWN | MUX_MODE2)	/* mii1_rxd0.rgmii1_rd0 */
		/* Slave 2 */
	 		0x40  (MUX_MODE2 | PIN_OUTPUT_PULLDOWN)  /* gpmc_a0.rgmii2_tctl */
			0x44  (MUX_MODE2 | PIN_INPUT_PULLDOWN) /* gpmc_a1.rgmii2_rctl */
			0x48  (MUX_MODE2 | PIN_OUTPUT_PULLDOWN) /* gpmc_a2.rgmii2_td3 */
			0x4c  (MUX_MODE2 | PIN_OUTPUT_PULLDOWN) /* gpmc_a3.rgmii2_td2 */
			0x50  (MUX_MODE2 | PIN_OUTPUT_PULLDOWN) /* gpmc_a4.rgmii2_td1 */
			0x54  (MUX_MODE2 | PIN_OUTPUT_PULLDOWN) /* gpmc_a5.rgmii2_td0 */
			0x58  (MUX_MODE2 | PIN_OUTPUT_PULLDOWN) /* gpmc_a6.rgmii2_tclk */
			0x5c  (MUX_MODE2 | PIN_INPUT_PULLDOWN) /* gpmc_a7.rgmii2_rclk */
			0x60  (MUX_MODE2 | PIN_INPUT_PULLDOWN) /* gpmc_a8.rgmii2_rd3 */
			0x64  (MUX_MODE2 | PIN_INPUT_PULLDOWN) /* gpmc_a9.rgmii2_rd2 */
			0x68  (MUX_MODE2 | PIN_INPUT_PULLDOWN) /* gpmc_a10.rgmii2_rd1 */
			0x6c  (MUX_MODE2 | PIN_INPUT_PULLDOWN) /* gpmc_a11.rgmii2_rd0 */
			0xd8  (PIN_OUTPUT_PULLUP | MUX_MODE7)  /* eth2 reset */
		>;
	};

	cpsw_sleep: cpsw_sleep {
		pinctrl-single,pins = <
			/* Slave 1 reset value */
			0x114 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x118 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x11c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x120 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x124 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x128 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x12c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x130 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x134 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x138 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x13c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x140 (PIN_INPUT_PULLDOWN | MUX_MODE7)
		/* Slave 2 reset value */
	 		0x40  (PIN_INPUT_PULLDOWN | MUX_MODE7)  /* gpmc_a0.rgmii2_tctl */
			0x44  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a1.rgmii2_rctl */
			0x48  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a2.rgmii2_td3 */
			0x4c  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a3.rgmii2_td2 */
			0x50  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a4.rgmii2_td1 */
			0x54  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a5.rgmii2_td0 */
			0x58  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a6.rgmii2_tclk */
			0x5c  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a7.rgmii2_rclk */
			0x60  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a8.rgmii2_rd3 */
			0x64  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a9.rgmii2_rd2 */
			0x68  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a10.rgmii2_rd1 */
			0x6c  (PIN_INPUT_PULLDOWN | MUX_MODE7) /* gpmc_a11.rgmii2_rd0 */
			0xd8  (PIN_INPUT_PULLDOWN | MUX_MODE7)  /* eth2 reset */
		>;
	};

	davinci_mdio_default: davinci_mdio_default {
		pinctrl-single,pins = <
			/* MDIO */
			0x148 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE0)	/* mdio_data.mdio_data */
			0x14c (PIN_OUTPUT_PULLUP | MUX_MODE0)			/* mdio_clk.mdio_clk */
		>;
	};

	davinci_mdio_sleep: davinci_mdio_sleep {
		pinctrl-single,pins = <
			/* MDIO reset value */
			0x148 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x14c (PIN_INPUT_PULLDOWN | MUX_MODE7)
		>;
	};

	mmc1_pins_default: pinmux_mmc1_pins {
		pinctrl-single,pins = <
			0x0F0 (PIN_INPUT_PULLUP | MUX_MODE0)    /* mmc0_dat3.mmc0_dat3 */
			0x0F4 (PIN_INPUT_PULLUP | MUX_MODE0)    /* mmc0_dat2.mmc0_dat2 */
			0x0F8 (PIN_INPUT_PULLUP | MUX_MODE0)    /* mmc0_dat1.mmc0_dat1 */
			0x0FC (PIN_INPUT_PULLUP | MUX_MODE0)    /* mmc0_dat0.mmc0_dat0 */
			0x100 (PIN_INPUT_PULLUP | MUX_MODE0)    /* mmc0_clk.mmc0_clk */
			0x104 (PIN_INPUT_PULLUP | MUX_MODE0)    /* mmc0_cmd.mmc0_cmd */
			0x1AC (PIN_INPUT_PULLUP | MUX_MODE7)    /* mcasp0_ahclkx.gpio3_21 */
	//		0x164 (PIN_INPUT_PULLUP | MUX_MODE7)    /* mcasp0_ahclkx.gpio3_21 */
			
		>;
	};

	mmc1_pins_sleep: pinmux_mmc1_pins_sleep {
		pinctrl-single,pins = <
			0x0F0 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x0F4 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x0F8 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x0FC (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x100 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x104 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x1AC (PIN_INPUT_PULLDOWN | MUX_MODE7)
	//		0x164 (PIN_INPUT_PULLDOWN | MUX_MODE7)    /* mcasp0_ahclkx.gpio3_21 */
		>;
	};

	mmc3_pins: pinmux_mmc3_pins {
		pinctrl-single,pins = <
			0x30 (PIN_INPUT_PULLUP | MUX_MODE3)	/* gpmc_a12.mmc2_dat0, INPUT_PULLUP | MODE3 */
			0x34 (PIN_INPUT_PULLUP | MUX_MODE3)	/* gpmc_a13.mmc2_dat1, INPUT_PULLUP | MODE3 */
			0x38 (PIN_INPUT_PULLUP | MUX_MODE3)	/* gpmc_a14.mmc2_dat2, INPUT_PULLUP | MODE3 */
			0x3c (PIN_INPUT_PULLUP | MUX_MODE3)	/* gpmc_a15.mmc2_dat3, INPUT_PULLUP | MODE3 */
			0x88 (PIN_INPUT_PULLUP | MUX_MODE3)	/* gpmc_csn3.mmc2_cmd, INPUT_PULLUP | MODE3 */
			0x8C (PIN_INPUT_PULLUP | MUX_MODE3)	/* gpmc_clk.mmc2_clk, INPUT_PULLUP | MODE3 */
		>;
	};

};

&spi0 {
    status = "okay";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&spi0_pins_default>;
	pinctrl-1 = <&spi0_pins_sleep>;
	ti,pindir-d0-in-d1-out =<1>;

	spi@0 {
		compatible = "rohm,dh2228fv";
		spi-max-frequency = <48000000>;
		reg = <0x0>;
	};
};

&uart0 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart0_pins>;

	status = "okay";
};


&uart1 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart1_pins_default>;
	pinctrl-1 = <&uart1_pins_sleep>;
	status = "okay";
};

&uart3 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart3_pins>;

	status = "okay";
};

&i2c0 {
	pinctrl-names = "default";
	pinctrl-0 = <&i2c0_pins>;

	status = "okay";
	clock-frequency = <100000>;

	rx8025: rx8025@32 {
		compatible = "epson,rx8025t";
		reg = <0x32>;
	};

	
};

&usb {
	status = "okay";
};

&usb_ctrl_mod {
	status = "okay";
};

&usb0_phy {
	status = "okay";
	dr_mode = "host";
	pinctrl-names = "default";
	pinctrl-0 = <&usbhub_pins>;
	reset-gpios = <&gpio3 13 GPIO_ACTIVE_HIGH>;
};

&usb1_phy {
	status = "okay";
	dr_mode = "host";
};

&usb0 {
	status = "okay";
};

&usb1 {
	status = "okay";
};

&cppi41dma  {
	status = "okay";
};

&elm {
	status = "okay";
};


&gpmc {
	status = "okay";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&nandflash_pins_default>;
	pinctrl-1 = <&nandflash_pins_sleep>;
	ranges = <0 0 0x08000000 0x1000000>;	/* CS0: 16MB for NAND */
	nand@0,0 {
		compatible = "ti,omap2-nand";
		reg = <0 0 4>; /* CS0, offset 0, IO size 4 */
		interrupt-parent = <&intc>;
		interrupts = <100>;
		ready-gpio = <&gpmc 0 GPIO_ACTIVE_HIGH>; /* gpmc_wait0 */
		ti,nand-ecc-opt = "bch8";
		ti,elm-id = <&elm>;
		nand-bus-width = <8>;
		gpmc,device-width = <1>;
		gpmc,sync-clk-ps = <0>;
		gpmc,cs-on-ns = <0>;
		gpmc,cs-rd-off-ns = <44>;
		gpmc,cs-wr-off-ns = <44>;
		gpmc,adv-on-ns = <6>;
		gpmc,adv-rd-off-ns = <34>;
		gpmc,adv-wr-off-ns = <44>;
		gpmc,we-on-ns = <0>;
		gpmc,we-off-ns = <40>;
		gpmc,oe-on-ns = <0>;
		gpmc,oe-off-ns = <54>;
		gpmc,access-ns = <64>;
		gpmc,rd-cycle-ns = <82>;
		gpmc,wr-cycle-ns = <82>;
		gpmc,bus-turnaround-ns = <0>;
		gpmc,cycle2cycle-delay-ns = <0>;
		gpmc,clk-activation-ns = <0>;
		gpmc,wr-access-ns = <40>;
		gpmc,wr-data-mux-bus-ns = <0>;
		/* MTD partition table */
		/* All SPL-* partitions are sized to minimal length
		 * which can be independently programmable. For
		 * NAND flash this is equal to size of erase-block */
		#address-cells = <1>;
		#size-cells = <1>;
		partition@0 {
			label = "NAND.SPL";
			reg = <0x00000000 0x000020000>;
		};
		partition@1 {
			label = "NAND.SPL.backup1";
			reg = <0x00020000 0x00020000>;
		};
		partition@2 {
			label = "NAND.SPL.backup2";
			reg = <0x00040000 0x00020000>;
		};
		partition@3 {
			label = "NAND.SPL.backup3";
			reg = <0x00060000 0x00020000>;
		};
		partition@4 {
			label = "NAND.u-boot-spl-os";
			reg = <0x00080000 0x00040000>;
		};
		partition@5 {
			label = "NAND.u-boot";
			reg = <0x000C0000 0x00100000>;
		};
		partition@6 {
			label = "NAND.u-boot-env";
			reg = <0x001C0000 0x00020000>;
		};
		partition@7 {
			label = "NAND.u-boot-env.backup1";
			reg = <0x001E0000 0x00020000>;
		};
		partition@8 {
			label = "NAND.kernel";
			reg = <0x00200000 0x00800000>;
		};
		partition@9 {
			label = "NAND.rootfs";
			reg = <0x00A00000 0x07600000>;
		};
		partition@10 {
			label = "NAND.userdata";
			reg = <0x08000000 0x08000000>;
		};		
	};
};

&mac {
	slaves = <2>;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&cpsw_default>;
	pinctrl-1 = <&cpsw_sleep>;
	dual_emac = <1>;
//	active_slave = <1>;
	status = "okay";
};

&davinci_mdio {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&davinci_mdio_default>;
	pinctrl-1 = <&davinci_mdio_sleep>;
	reset-gpios = <&gpio0 10 GPIO_ACTIVE_LOW>;
	reset-delay-us = <3000>;
	status = "okay";
};

&cpsw_emac0 {
	phy_id = <&davinci_mdio>, <0>;
	phy-mode = "rgmii-txid";
	mac-address=[12 23 34 45 56 67];
	dual_emac_res_vlan=<2>;
};

&cpsw_emac1 {
	phy_id = <&davinci_mdio>, <6>;
	phy-mode = "rgmii-txid";
	mac-address=[22 32 43 54 65 76];
	dual_emac_res_vlan=<3>;
};

&tscadc {
	status = "okay";
	tsc {
		status = "disabled";
	};

	adc {
		ti,adc-channels = <0 1>;
	};
};

&mmc1 {
	status = "okay";
	vmmc-supply = <&vdd_3v3>;
	bus-width = <4>;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&mmc1_pins_default>;
	pinctrl-1 = <&mmc1_pins_sleep>;
	cd-gpios = <&gpio3 21 GPIO_ACTIVE_HIGH>;
//	wp-gpios = <&gpio0 7 GPIO_ACTIVE_HIGH>;
};

&mmc3 {
	/* these are on the crossbar and are outlined in the
	   xbar-event-map element */
	dmas = <&edma_xbar 12 0 1
		&edma_xbar 13 0 2>;
	dma-names = "tx", "rx";
	status = "okay";
	vmmc-supply = <&vdd_3v3>;
	bus-width = <4>;
	max-frequency = <25000000>;
	pinctrl-names = "default";
	pinctrl-0 = <&mmc3_pins>;
	ti,non-removable;
	ti,needs-special-hs-handling;
	cap-power-off-card;
	keep-power-in-suspend;
	};

&sham {
	status = "okay";
};

&aes {
	status = "okay";
};

&wkup_m3_ipc {
	ti,scale-data-fw = "am335x-evm-scale-data.bin";
};

//&rtc {
//	system-power-controller;
//};

&sgx {
	status = "okay";
};
